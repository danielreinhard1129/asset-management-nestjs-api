datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int        @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String     @unique
  password     String
  role         Role
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  deletedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  assetHistories      AssetHistory[] @relation("User")
  adminAssetHistories AssetHistory[] @relation("Admin")
  hrBast              Bast[]         @relation("HR")
  adminBast           Bast[]         @relation("Admin")

  assetReturned AssetReturned[]
  assets        Asset[]
  assetRequests AssetRequest[]
  notifications Notification[]

  @@map("users")
}

enum Role {
  ADMIN
  HR
  USER
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String
  address   String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  users User[]

  @@map("departments")
}

model Category {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  image             String
  deletedAt         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assets            Asset[]
  assetRequestItems AssetRequestItem[]

  @@map("categories")
}

model Asset {
  id            Int       @id @default(autoincrement())
  name          String
  tag           String    @unique
  serial        String    @unique
  purchaseDate  DateTime
  purchasePrice Decimal
  status        Status    @default(AVAILABLE)
  image         String
  categoryId    Int
  userId        Int?
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  category       Category       @relation(fields: [categoryId], references: [id])
  user           User?          @relation(fields: [userId], references: [id])
  assetHistories AssetHistory[]
  bastItems      BastItem[]

  @@map("assets")
}

enum Status {
  AVAILABLE
  IN_PROGRESS
  IN_USE
  MAINTENANCE
  RETIRED
  MISSING
  BROKEN
}

model AssetHistory {
  id        Int      @id @default(autoincrement())
  assetId   Int
  userId    Int?
  adminId   Int
  type      Type
  notes     String?  @db.LongText()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  asset Asset @relation(fields: [assetId], references: [id])
  user  User? @relation("User", fields: [userId], references: [id])
  admin User  @relation("Admin", fields: [adminId], references: [id])

  @@map("asset_histories")
}

enum Type {
  CHECKOUT
  CREATE
  UPDATE
  OTHER
  // TODO: ADD CHECKIN IF POSSIBLE
}

model Bast {
  id               Int      @id @default(autoincrement())
  bastNo           String   @unique @db.VarChar(20)
  type             TypeBast
  isCheckedByAdmin Boolean  @default(false)
  isCheckedByUser  Boolean  @default(false)
  hrId             Int?
  adminId          Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  hr            User?           @relation("HR", fields: [hrId], references: [id])
  admin         User?           @relation("Admin", fields: [adminId], references: [id])
  assetRequests AssetRequest[]
  bastItems     BastItem[]
  assetReturned AssetReturned[]

  @@map("bast")
}

enum TypeBast {
  REQUEST
  RETURN
}

model BastItem {
  id        Int      @id @default(autoincrement())
  bastId    Int
  assetId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bast  Bast  @relation(fields: [bastId], references: [id])
  asset Asset @relation(fields: [assetId], references: [id])

  @@map("bast_items")
}

model AssetRequest {
  id           Int                @id @default(autoincrement())
  userId       Int
  bastId       Int
  status       StatusAssetRequest
  assignToUser String?
  notes        String?            @db.LongText()
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  user              User               @relation(fields: [userId], references: [id])
  bast              Bast               @relation(fields: [bastId], references: [id])
  assetRequestItems AssetRequestItem[]

  @@map("asset_requests")
}

enum StatusAssetRequest {
  PENDING
  IN_PROGRESS
  APPROVE
  REJECT
  CLAIMED
}

model AssetRequestItem {
  id             Int      @id @default(autoincrement())
  assetRequestId Int
  categoryId     Int
  qty            Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  assetRequest AssetRequest @relation(fields: [assetRequestId], references: [id])
  category     Category     @relation(fields: [categoryId], references: [id])

  @@map("asset_request_items")
}

model AssetReturned {
  id        Int                 @id @default(autoincrement())
  userId    Int
  bastId    Int
  status    StatusAssetReturned
  notes     String?             @db.LongText()
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  user User @relation(fields: [userId], references: [id])
  bast Bast @relation(fields: [bastId], references: [id])

  @@map("asset_returned")
}

enum StatusAssetReturned {
  PENDING
  IN_PROGRESS
  APPROVE // TODO: remove status approve
  REJECT
  DONE
}

model Notification {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  userId      Int
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}
